# <type>(<optional scope>): <description>
#
# <optional body>
#
# <optional footer>

# Types
# * Is an **mandatory** part of the format
# * API relevant changes
#   * `feat` Commits, that adds a new feature
#   * `fix` Commits, that fixes a bug
# * `refactor` Commits, Commits, that rewrite/restructure your code, however does not change any API behaviour
#   * perf Commits are special refactor commits, that improve performance
#
# * `test` Commits, that add missing tests or correcting existing tests
#
# * `docs` Commits, that affect documentation only
# * `build` Commits, that affect build components like build tool, ci pipeline, dependencies, project version, ...
# * `ops` Commits, that affect operational components like infrastructure, deployment, backup, recovery, ...
# * `chore` Miscellaneous commits e.g. modifying .gitignore
# * `revert` Revert commits e.g. revert:type(scope): subject(version: x.y.z)
#
# Scopes
# The `scope` provides additional contextual information
# * Is an **optional** part of the format
# * Allowed Scopes depends on the specific project
# * Don't use issue identifiers as scopes
# * e.g. feat(i18n.go): 新增德國語系
#
# Description
# The `description` contains a concise description of the change
# * Is an **mandatory** part of the format
# * Use the imperative, present tense: "change" , not "changed", nor "changes"
#   *  Think of This commit will..., or This commit should
# * Don't capitalize the first letter
# * No dot(.) at the end
#
# Body
# * The `body should include the motivation for the change and contrast this with previous behavior.
# * Is an **optional** part of the format
# * Use the imperative, present tense: "change" , not "changed", nor "changes"
# * This is the place to mention issue identifiers and their relations
# * e.g.
#   feat(i18n.go): i18n 新增德國語系
#
#   因應新需求調整:
#   1. i18n.go 支持德國語系
#   
#   調整項目:
#   1. i18n.go/supportLocales, 新增德國 
#   2. i18n.go/ParseLocale, 新增 parse de 參數
#   3. locales/de-de.yaml, 新增德國
#
# Footer
# The `footer` should contain any information about Breaking Changes and is also the place to reference Issues that this commit refers to.
# * Is an **optional** part of the format
# optionally reference an issue by its id.
# `Breaking Changes` should start with the word BREAKING CHANGES: followed by space or two newlines. The rest of the commit message is then used for this.
#
# Examples
#
# ```
# feat: add email notification on new direct messages
# ```
#
# ```
# feat(shopping cart): add the add button 
# ```
#
# ```
# feat!: remove ticket list endpoint
#
# issue: #1, #2
#
# BREAKING CHANGES: ticket enpoints no longer supports list all entites.
# ```
#
# ```
# fix(api): handle empty message in request body
# ```
#
# ```
# fix: add missing parameter to service call
#
# The error occurred because of <reasons>.
#
# issue: #1
#
# ```
#
# ```
# perf: decrease memory footprint for determine uniqe visitors by using HyperLogLog
# ```
